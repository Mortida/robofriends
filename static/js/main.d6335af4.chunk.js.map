{"version":3,"sources":["components/SearchIn.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchIn","searchChange","className","onChange","type","placeholder","Card","id","name","email","src","alt","CardList","ser","resault","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","e","setState","searchfiald","target","value","state","fetch","then","response","json","this","filtred","filter","u","toLowerCase","includes","arr","Object","entries","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gRAeeA,G,MAbE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACf,OACA,yBAAKC,UAAU,OACX,2BACAC,SAAUF,EACVC,UAAU,kDACVE,KAAK,QACLC,YAAY,cCMLC,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACrB,OACI,yBAAKP,UAAU,sDACX,yBAAKQ,IAAG,mCAA8BH,EAA9B,UAA0CI,IAAI,KACtD,6BACI,4BAAKH,GACL,2BAAIC,MCiBLG,G,MArBE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QACrB,OACI,6BACK,uBAAGP,GAAG,UAAN,oBAAiCO,GAE9BD,EAAIE,KAAI,SAACC,EAAMC,GACX,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIM,EAAII,GAAGV,GACXC,KAAMK,EAAII,GAAGT,KACbC,MAAOI,EAAII,GAAGR,cCL3BU,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WC0CJC,E,kDAxCb,aAAc,IAAD,8BACX,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXjB,KAAM,GACNc,YAAa,IAJJ,E,gEAYO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnB,GAAI,OAAG,EAAKa,SAAS,CAACb,KAAMA,S,+BAG3B,IAAD,EACsBsB,KAAKL,MAA1BjB,EADD,EACCA,KAAMc,EADP,EACOA,YACPS,EAAUvB,EAAKwB,QAAO,SAAAC,GAC1B,OAAOA,EAAEjC,KAAKkC,cAAcC,SAASb,EAAYY,kBAE/CE,EAAMC,OAAOC,QAAQP,GAEzB,OAAIvB,EAAK+B,OAIL,yBAAK7C,UAAU,MACb,+CACA,kBAAC,EAAD,CAAUD,aAAcqC,KAAKX,iBAC7B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUd,IAAK0B,EAASzB,QAAS8B,EAAIG,WAPlC,wBAAI7C,UAAU,MAAd,mB,GA3BK8C,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTrB,MAAK,SAAA0B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfyB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDezC,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,eAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCvB,MAAMsB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAC,GAEJ,IAAM+C,EAAc/C,EAAS8C,QAAQE,IAAI,gBAEnB,MAApBhD,EAASiD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMpD,MAAK,SAAA0B,GACjCA,EAAa2B,aAAarD,MAAK,WAC7BgB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMpD,MAAK,WACjCgC,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.d6335af4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchIn = ({searchChange}) => {\r\n    return (\r\n    <div className=\"ma3\">\r\n        <input\r\n        onChange={searchChange}\r\n        className=\"pa2 ba b--black bg-light-blue grow br2 shadow-5\"\r\n        type='seach' \r\n        placeholder='Search'  \r\n        />\r\n</div>\r\n    )\r\n}\r\n\r\nexport default SearchIn;","import React from 'react';\r\n\r\nconst Card = ({id, name, email})=>{\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/test${id}?50x50`} alt=''/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\nconst CardList = ({ ser, resault }) => {\r\n    return(\r\n        <div>\r\n            {<p id='result'>Search resault:  {resault}</p>}\r\n            {\r\n                ser.map((user, i)=>{\r\n                    return (\r\n                        <Card\r\n                            key={i} \r\n                            id={ser[i].id}\r\n                            name={ser[i].name}\r\n                            email={ser[i].email}\r\n                        />\r\n                    )\r\n                    \r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchIn from '../components/SearchIn';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      user: [],\n      searchfiald: \"\",\n    }\n  }\n\n  onSearchChange = (e) => {\n    this.setState({searchfiald: e.target.value});\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user=> this.setState({user: user}))\n  }\n  \n  render(){\n    const {user, searchfiald} = this.state;\n    const filtred = user.filter(u=>{\n      return u.name.toLowerCase().includes(searchfiald.toLowerCase());\n    })\n    let arr = Object.entries(filtred)\n\n    if(!user.length){\n      return <h1 className='tc'>Loading ...</h1>\n    }else{\n        return (\n        <div className='tc'>\n          <h1>Awesome Website</h1>\n          <SearchIn searchChange={this.onSearchChange}/>\n          <Scroll>\n          <CardList ser={filtred} resault={arr.length}/>\n          </Scroll>\n        </div>\n      );\n    } \n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}