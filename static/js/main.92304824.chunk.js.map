{"version":3,"sources":["components/SearchIn.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchIn","searchChange","className","area-aria-label","onChange","type","placeholder","Card","id","name","email","src","alt","CardList","ser","resault","map","user","i","key","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","e","setState","searchfiald","target","value","state","fetch","then","response","json","this","filtred","filter","u","toLowerCase","includes","arr","Object","entries","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.92304824.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchIn = ({searchChange}) => {\r\n    return (\r\n    <div className=\"ma3\">\r\n        <input\r\n        area-aria-label='Search Robots'\r\n        onChange={searchChange}\r\n        className=\"pa2 ba b--black bg-light-blue grow br2 shadow-5\"\r\n        type='seach' \r\n        placeholder='Search'  \r\n        />\r\n</div>\r\n    )\r\n}\r\n\r\nexport default SearchIn;","import React from 'react';\r\n\r\nconst Card = ({id, name, email})=>{\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/test${id}?size=200x200`} alt=''/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ ser, resault }) => {\r\n    return(\r\n        <div>\r\n            {<p id='result'>Search resault:  {resault}</p>}\r\n            {\r\n                ser.map((user, i)=>{\r\n                    return (\r\n                        <Card\r\n                            key={i} \r\n                            id={ser[i].id}\r\n                            name={ser[i].name}\r\n                            email={ser[i].email}\r\n                        />\r\n                    )\r\n                    \r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '1000px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchIn from '../components/SearchIn';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      user: [],\r\n      searchfiald: \"\",\r\n    }\r\n  }\r\n\r\n  onSearchChange = (e) => {\r\n    this.setState({searchfiald: e.target.value});\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(user=> this.setState({user: user}))\r\n  }\r\n  \r\n  render(){\r\n    const {user, searchfiald} = this.state;\r\n    const filtred = user.filter(u=>{\r\n      return u.name.toLowerCase().includes(searchfiald.toLowerCase());\r\n    })\r\n    let arr = Object.entries(filtred)\r\n\r\n    if(!user.length){\r\n      return <h1 className='tc'>Loading ...</h1>\r\n    }else{\r\n        return (\r\n        <div className='tc'>\r\n          <h1>Awesome Website</h1>\r\n          <SearchIn searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n          <CardList ser={filtred} resault={arr.length}/>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    } \r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}